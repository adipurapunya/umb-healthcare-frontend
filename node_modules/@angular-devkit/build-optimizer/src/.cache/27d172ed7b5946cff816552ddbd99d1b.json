{"remainingRequest":"E:\\CPPBT 2018\\angular-src\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!E:\\CPPBT 2018\\angular-src\\node_modules\\ng2-translate\\src\\translate.parser.js","dependencies":[{"path":"E:\\CPPBT 2018\\angular-src\\node_modules\\ng2-translate\\src\\translate.parser.js","mtime":1482254940000},{"path":"E:\\CPPBT 2018\\angular-src\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1535767529499},{"path":"E:\\CPPBT 2018\\angular-src\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\nimport { Injectable } from \"@angular/core\";\nimport { isDefined } from \"./util\";\nexport var TranslateParser = /*@__PURE__*/ (function () {\n    function TranslateParser() {\n    }\n    return TranslateParser;\n}());\nexport var DefaultTranslateParser = /*@__PURE__*/ (function (_super) {\n    __extends(DefaultTranslateParser, _super);\n    function DefaultTranslateParser() {\n        _super.apply(this, arguments);\n        this.templateMatcher = /{{\\s?([^{}\\s]*)\\s?}}/g;\n    }\n    DefaultTranslateParser.prototype.interpolate = function (expr, params) {\n        var _this = this;\n        if (typeof expr !== 'string' || !params) {\n            return expr;\n        }\n        return expr.replace(this.templateMatcher, function (substring, b) {\n            var r = _this.getValue(params, b);\n            return isDefined(r) ? r : substring;\n        });\n    };\n    DefaultTranslateParser.prototype.getValue = function (target, key) {\n        var keys = key.split('.');\n        key = '';\n        do {\n            key += keys.shift();\n            if (isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\n                target = target[key];\n                key = '';\n            }\n            else if (!keys.length) {\n                target = undefined;\n            }\n            else {\n                key += '.';\n            }\n        } while (keys.length);\n        return target;\n    };\n    return DefaultTranslateParser;\n}(TranslateParser));\n",null]}