import { Component, Injectable, NgModule } from '@angular/core';
import { assign, noop } from 'lodash';
import swal from 'sweetalert2';
import { SnotifyService, SnotifyModule, ToastDefaults } from 'ng-snotify';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgxAlertTemplatesComponent {
}
NgxAlertTemplatesComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-alert-templates',
                template: `
    <ng-snotify></ng-snotify>
  `,
            },] },
];
/** @nocollapse */
NgxAlertTemplatesComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NgxAlertInterfaces {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @record
 */

class NgxAlertsService {
    /**
     * @param {?} notifyService
     */
    constructor(notifyService) {
        this.notifyService = notifyService;
    }
    /**
     * @param {?} type
     * @param {?} config
     * @return {?}
     */
    defaultNotify(type, config) {
        return this.notifyService[type](config.body, config.title || null, {
            timeout: config.timeout || 3000,
            showProgressBar: config.showProgressBar || true,
            closeOnClick: config.closeOnClick || true,
            pauseOnHover: config.pauseOnHover || true,
            buttons: config.buttons,
            placeholder: config.placeholder,
            html: config.html || null,
            position: config.position || 'rightBottom',
        });
    }
    /**
     * @param {?} config
     * @return {?}
     */
    notifySimple(config) {
        this.defaultNotify('simple', config);
    }
    /**
     * @param {?} config
     * @return {?}
     */
    notifySuccess(config) {
        this.defaultNotify('success', config);
    }
    /**
     * @param {?} config
     * @return {?}
     */
    notifyInfo(config) {
        this.defaultNotify('info', config);
    }
    /**
     * @param {?} config
     * @return {?}
     */
    notifyWarning(config) {
        this.defaultNotify('warning', config);
    }
    /**
     * @param {?} config
     * @return {?}
     */
    notifyError(config) {
        this.defaultNotify('error', config);
    }
    /**
     * @param {?} config
     * @return {?}
     */
    notifyPrompt(config) {
        this.defaultNotify('prompt', config);
    }
    /**
     * @param {?} config
     * @return {?}
     */
    notifyConfirm(config) {
        this.defaultNotify('confirm', config);
    }
    /**
     * @param {?} toastId
     * @return {?}
     */
    notifyDismiss(toastId) {
        this.notifyService.remove(toastId);
    }
    /**
     * @param {?=} options
     * @param {?=} successCb
     * @param {?=} closeCb
     * @return {?}
     */
    alert(options = {}, successCb = noop, closeCb = noop) {
        const /** @type {?} */ defaultOptions = {
            type: options.type || null,
            title: options.title || null,
            text: options.text || null,
            buttonsStyling: options.buttonsStyling || false,
            confirmButtonClass: options.confirmButtonClass || 'btn btn-lg btn-secondary',
            animation: options.animation || true,
            customClass: options.customClass || '',
        };
        if (closeCb !== noop) {
            defaultOptions.showCancelButton = options.showCancelButton || true;
            defaultOptions.cancelButtonClass = options.cancelButtonClass || 'btn btn-lg btn-secondary';
        }
        return swal(assign(defaultOptions, options)).then(res => successCb(res), dismiss => closeCb(dismiss));
    }
    /**
     * @param {?=} options
     * @param {?=} successCb
     * @param {?=} closeCb
     * @return {?}
     */
    alertSuccess(options = {}, successCb = noop, closeCb = noop) {
        const /** @type {?} */ defaultOptions = {
            type: 'success',
            confirmButtonClass: 'btn btn-lg btn-success',
        };
        return this.alert(assign(defaultOptions, options), successCb, closeCb);
    }
    /**
     * @param {?=} options
     * @param {?=} successCb
     * @param {?=} closeCb
     * @return {?}
     */
    alertWarning(options = {}, successCb = noop, closeCb = noop) {
        const /** @type {?} */ defaultOptions = {
            type: 'warning',
            confirmButtonClass: 'btn btn-lg btn-warning',
        };
        return this.alert(assign(defaultOptions, options), successCb, closeCb);
    }
    /**
     * @param {?=} options
     * @param {?=} successCb
     * @param {?=} closeCb
     * @return {?}
     */
    alertError(options = {}, successCb = noop, closeCb = noop) {
        const /** @type {?} */ defaultOptions = {
            type: 'error',
            confirmButtonClass: 'btn btn-lg btn-danger',
        };
        return this.alert(assign(defaultOptions, options), successCb, closeCb);
    }
    /**
     * @param {?=} options
     * @param {?=} successCb
     * @param {?=} closeCb
     * @return {?}
     */
    alertInfo(options = {}, successCb = noop, closeCb = noop) {
        const /** @type {?} */ defaultOptions = {
            type: 'info',
            confirmButtonClass: 'btn btn-lg btn-info',
        };
        return this.alert(assign(defaultOptions, options), successCb, closeCb);
    }
    /**
     * @param {?=} options
     * @param {?=} successCb
     * @param {?=} closeCb
     * @return {?}
     */
    alertQuestion(options = {}, successCb = noop, closeCb = noop) {
        const /** @type {?} */ defaultOptions = {
            type: 'question',
            confirmButtonClass: 'btn btn-lg btn-primary',
        };
        return this.alert(assign(defaultOptions, options), successCb, closeCb);
    }
}
NgxAlertsService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NgxAlertsService.ctorParameters = () => [
    { type: SnotifyService, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const components = [NgxAlertTemplatesComponent];
class NgxAlertsModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: NgxAlertsModule,
            providers: [{ provide: 'SnotifyToastConfig', useValue: ToastDefaults }, SnotifyService, NgxAlertsService],
        };
    }
}
NgxAlertsModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, SnotifyModule],
                declarations: [...components],
                exports: [...components],
            },] },
];
/** @nocollapse */
NgxAlertsModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { NgxAlertTemplatesComponent, NgxAlertInterfaces, NgxAlertsService, NgxAlertsModule };
//# sourceMappingURL=ngx-plus-ngx-alerts.js.map
