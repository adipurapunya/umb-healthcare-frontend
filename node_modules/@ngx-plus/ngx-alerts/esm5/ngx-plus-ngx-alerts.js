import * as tslib_1 from "tslib";
import { Component, Injectable, NgModule } from '@angular/core';
import { assign, noop } from 'lodash';
import swal from 'sweetalert2';
import { SnotifyService, SnotifyModule, ToastDefaults } from 'ng-snotify';
import { CommonModule } from '@angular/common';
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NgxAlertTemplatesComponent = /** @class */ (function () {
    function NgxAlertTemplatesComponent() {
    }
    return NgxAlertTemplatesComponent;
}());
NgxAlertTemplatesComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-alert-templates',
                template: "\n    <ng-snotify></ng-snotify>\n  ",
            },] },
];
/** @nocollapse */
NgxAlertTemplatesComponent.ctorParameters = function () { return []; };
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NgxAlertInterfaces = /** @class */ (function () {
    function NgxAlertInterfaces() {
    }
    return NgxAlertInterfaces;
}());
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @record
 */
var NgxAlertsService = /** @class */ (function () {
    /**
     * @param {?} notifyService
     */
    function NgxAlertsService(notifyService) {
        this.notifyService = notifyService;
    }
    /**
     * @param {?} type
     * @param {?} config
     * @return {?}
     */
    NgxAlertsService.prototype.defaultNotify = function (type, config) {
        return this.notifyService[type](config.body, config.title || null, {
            timeout: config.timeout || 3000,
            showProgressBar: config.showProgressBar || true,
            closeOnClick: config.closeOnClick || true,
            pauseOnHover: config.pauseOnHover || true,
            buttons: config.buttons,
            placeholder: config.placeholder,
            html: config.html || null,
            position: config.position || 'rightBottom',
        });
    };
    /**
     * @param {?} config
     * @return {?}
     */
    NgxAlertsService.prototype.notifySimple = function (config) {
        this.defaultNotify('simple', config);
    };
    /**
     * @param {?} config
     * @return {?}
     */
    NgxAlertsService.prototype.notifySuccess = function (config) {
        this.defaultNotify('success', config);
    };
    /**
     * @param {?} config
     * @return {?}
     */
    NgxAlertsService.prototype.notifyInfo = function (config) {
        this.defaultNotify('info', config);
    };
    /**
     * @param {?} config
     * @return {?}
     */
    NgxAlertsService.prototype.notifyWarning = function (config) {
        this.defaultNotify('warning', config);
    };
    /**
     * @param {?} config
     * @return {?}
     */
    NgxAlertsService.prototype.notifyError = function (config) {
        this.defaultNotify('error', config);
    };
    /**
     * @param {?} config
     * @return {?}
     */
    NgxAlertsService.prototype.notifyPrompt = function (config) {
        this.defaultNotify('prompt', config);
    };
    /**
     * @param {?} config
     * @return {?}
     */
    NgxAlertsService.prototype.notifyConfirm = function (config) {
        this.defaultNotify('confirm', config);
    };
    /**
     * @param {?} toastId
     * @return {?}
     */
    NgxAlertsService.prototype.notifyDismiss = function (toastId) {
        this.notifyService.remove(toastId);
    };
    /**
     * @param {?=} options
     * @param {?=} successCb
     * @param {?=} closeCb
     * @return {?}
     */
    NgxAlertsService.prototype.alert = function (options, successCb, closeCb) {
        if (options === void 0) { options = {}; }
        if (successCb === void 0) { successCb = noop; }
        if (closeCb === void 0) { closeCb = noop; }
        var /** @type {?} */ defaultOptions = {
            type: options.type || null,
            title: options.title || null,
            text: options.text || null,
            buttonsStyling: options.buttonsStyling || false,
            confirmButtonClass: options.confirmButtonClass || 'btn btn-lg btn-secondary',
            animation: options.animation || true,
            customClass: options.customClass || '',
        };
        if (closeCb !== noop) {
            defaultOptions.showCancelButton = options.showCancelButton || true;
            defaultOptions.cancelButtonClass = options.cancelButtonClass || 'btn btn-lg btn-secondary';
        }
        return swal(assign(defaultOptions, options)).then(function (res) { return successCb(res); }, function (dismiss) { return closeCb(dismiss); });
    };
    /**
     * @param {?=} options
     * @param {?=} successCb
     * @param {?=} closeCb
     * @return {?}
     */
    NgxAlertsService.prototype.alertSuccess = function (options, successCb, closeCb) {
        if (options === void 0) { options = {}; }
        if (successCb === void 0) { successCb = noop; }
        if (closeCb === void 0) { closeCb = noop; }
        var /** @type {?} */ defaultOptions = {
            type: 'success',
            confirmButtonClass: 'btn btn-lg btn-success',
        };
        return this.alert(assign(defaultOptions, options), successCb, closeCb);
    };
    /**
     * @param {?=} options
     * @param {?=} successCb
     * @param {?=} closeCb
     * @return {?}
     */
    NgxAlertsService.prototype.alertWarning = function (options, successCb, closeCb) {
        if (options === void 0) { options = {}; }
        if (successCb === void 0) { successCb = noop; }
        if (closeCb === void 0) { closeCb = noop; }
        var /** @type {?} */ defaultOptions = {
            type: 'warning',
            confirmButtonClass: 'btn btn-lg btn-warning',
        };
        return this.alert(assign(defaultOptions, options), successCb, closeCb);
    };
    /**
     * @param {?=} options
     * @param {?=} successCb
     * @param {?=} closeCb
     * @return {?}
     */
    NgxAlertsService.prototype.alertError = function (options, successCb, closeCb) {
        if (options === void 0) { options = {}; }
        if (successCb === void 0) { successCb = noop; }
        if (closeCb === void 0) { closeCb = noop; }
        var /** @type {?} */ defaultOptions = {
            type: 'error',
            confirmButtonClass: 'btn btn-lg btn-danger',
        };
        return this.alert(assign(defaultOptions, options), successCb, closeCb);
    };
    /**
     * @param {?=} options
     * @param {?=} successCb
     * @param {?=} closeCb
     * @return {?}
     */
    NgxAlertsService.prototype.alertInfo = function (options, successCb, closeCb) {
        if (options === void 0) { options = {}; }
        if (successCb === void 0) { successCb = noop; }
        if (closeCb === void 0) { closeCb = noop; }
        var /** @type {?} */ defaultOptions = {
            type: 'info',
            confirmButtonClass: 'btn btn-lg btn-info',
        };
        return this.alert(assign(defaultOptions, options), successCb, closeCb);
    };
    /**
     * @param {?=} options
     * @param {?=} successCb
     * @param {?=} closeCb
     * @return {?}
     */
    NgxAlertsService.prototype.alertQuestion = function (options, successCb, closeCb) {
        if (options === void 0) { options = {}; }
        if (successCb === void 0) { successCb = noop; }
        if (closeCb === void 0) { closeCb = noop; }
        var /** @type {?} */ defaultOptions = {
            type: 'question',
            confirmButtonClass: 'btn btn-lg btn-primary',
        };
        return this.alert(assign(defaultOptions, options), successCb, closeCb);
    };
    return NgxAlertsService;
}());
NgxAlertsService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NgxAlertsService.ctorParameters = function () { return [
    { type: SnotifyService, },
]; };
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var components = [NgxAlertTemplatesComponent];
var NgxAlertsModule = /** @class */ (function () {
    function NgxAlertsModule() {
    }
    /**
     * @return {?}
     */
    NgxAlertsModule.forRoot = function () {
        return {
            ngModule: NgxAlertsModule,
            providers: [{ provide: 'SnotifyToastConfig', useValue: ToastDefaults }, SnotifyService, NgxAlertsService],
        };
    };
    return NgxAlertsModule;
}());
NgxAlertsModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, SnotifyModule],
                declarations: tslib_1.__spread(components),
                exports: tslib_1.__spread(components),
            },] },
];
/** @nocollapse */
NgxAlertsModule.ctorParameters = function () { return []; };
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */
export { NgxAlertTemplatesComponent, NgxAlertInterfaces, NgxAlertsService, NgxAlertsModule };
//# sourceMappingURL=ngx-plus-ngx-alerts.js.map
